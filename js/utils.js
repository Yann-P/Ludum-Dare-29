// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Vec2 = (function() {
    function Vec2(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    Vec2.prototype.copy = function() {
      return new Vec2(this.x, this.y);
    };

    Vec2.prototype.getAngle = function(vec2) {
      return Math.atan2(this.y - vec2.y, this.x - vec2.x);
    };

    Vec2.prototype.getDistance = function(vec2) {
      return Math.sqrt(Math.pow(this.x - vec2.x, 2) + Math.pow(this.y - vec2.y, 2));
    };

    Vec2.random = function(maxX, maxY) {
      return new Vec2(~~(Math.random() * maxX), ~~(Math.random() * maxY));
    };

    Vec2.fromArray = function(arr) {
      return new Vec2(arr[0], arr[1]);
    };

    return Vec2;

  })();

  this.Shape = (function() {
    function Shape() {}

    return Shape;

  })();

  this.Circle = (function(_super) {
    __extends(Circle, _super);

    function Circle(x, y, radius) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      Circle.__super__.constructor.call(this);
    }

    Circle.fromArray = function(arr) {
      return new Circle(arr[0], arr[1], arr[2]);
    };

    return Circle;

  })(Shape);

  this.Rectangle = (function(_super) {
    __extends(Rectangle, _super);

    function Rectangle(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      Rectangle.__super__.constructor.call(this);
    }

    Rectangle.prototype.collides = function(rectangle) {
      return !((rectangle.x >= this.x + this.width) || (rectangle.x + rectangle.width <= this.x) || (rectangle.y >= this.y + this.height) || (rectangle.y + rectangle.height <= this.y));
    };

    Rectangle.fromArray = function(arr) {
      return new Rectangle(arr[0], arr[1], arr[2], arr[3]);
    };

    return Rectangle;

  })(Shape);

  ld.AnimSheet = (function() {
    function AnimSheet(url, size) {
      this.url = url;
      this.size = size;
      this.image = new Image();
      this.image.src = this.url;
    }

    return AnimSheet;

  })();

  ld.Anim = (function() {
    function Anim(animid, sheet, frameTime, sequence) {
      this.animid = animid;
      this.sheet = sheet;
      this.frameTime = frameTime;
      this.sequence = sequence;
      this.startTime = Date.now();
      this.ticks = 0;
      this.frameid = 0;
    }

    Anim.prototype.update = function() {
      var deltaTime;
      deltaTime = Date.now() - this.startTime;
      if (deltaTime > this.frameTime) {
        this.frameid = (this.ticks++) % this.sequence.length;
        return this.startTime = Date.now();
      }
    };

    Anim.prototype.draw = function(ctx, pos) {
      var frame;
      frame = this.sequence[this.frameid];
      return ctx.drawImage(this.sheet.image, frame[0] * this.sheet.size.x, frame[1] * this.sheet.size.y, this.sheet.size.x, this.sheet.size.y, pos.x, pos.y, this.sheet.size.x, this.sheet.size.y);
    };

    return Anim;

  })();

}).call(this);
